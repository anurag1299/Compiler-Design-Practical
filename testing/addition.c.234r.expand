
;; Function main (main, funcdef_no=0, decl_uid=2360, cgraph_uid=0, symbol_order=0)

main (int argc, const char * * argv)
{
  int c;
  int b;
  int a;
  int D.2366;
  int _6;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  a_1 = 10;
  b_2 = 20;
  c_3 = a_1 + b_2;
  printf ("%d", c_3);
  _6 = 0;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0>:
  return _6;
;;    succ:       EXIT

}



Partition map 

Partition 1 (a_1 - 1 )
Partition 2 (b_2 - 2 )
Partition 3 (c_3 - 3 )
Partition 6 (_6 - 6 )
Partition 7 (argc_7(D) - 7 )
Partition 8 (argv_8(D) - 8 )
Partition 9 (_9(D) - 9 )


Coalescible Partition map 

Partition 0, base 0 (argc_7(D) - 7 )
Partition 1, base 1 (argv_8(D) - 8 )
Partition 2, base 2 (_9(D) - 9 )


Partition map 

Partition 0 (argc_7(D) - 7 )
Partition 1 (argv_8(D) - 8 )
Partition 2 (_9(D) - 9 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (argc_7(D) - 7 )
Partition 1 (argv_8(D) - 8 )
Partition 2 (_9(D) - 9 )

After Coalescing:

Partition map 

Partition 0 (a_1 - 1 )
Partition 1 (b_2 - 2 )
Partition 2 (c_3 - 3 )
Partition 3 (_6 - 6 )
Partition 4 (argc_7(D) - 7 )
Partition 5 (argv_8(D) - 8 )
Partition 6 (_9(D) - 9 )

main (int argc, const char * * argv)
{
  int c;
  int b;
  int a;
  int D.2366;
  int _6;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  a_1 = 10;
  b_2 = 20;
  c_3 = a_1 + b_2;
  printf ("%d", c_3);
  _6 = 0;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0>:
  return _6;
;;    succ:       EXIT

}


Partition 2: size 4 align 4
	c_3
Partition 1: size 4 align 4
	b_2
Partition 0: size 4 align 4
	a_1

;; Generating RTL for gimple basic block 2

;; a_1 = 10;

(insn 7 6 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])
        (const_int 10 [0xa])) "addition.c":5 -1
     (nil))

;; b_2 = 20;

(insn 8 7 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])
        (const_int 20 [0x14])) "addition.c":6 -1
     (nil))

;; c_3 = a_1 + b_2;

(insn 13 8 14 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])) "addition.c":7 -1
     (nil))

(insn 14 13 15 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])) "addition.c":7 -1
     (nil))

(insn 15 14 16 (parallel [
            (set (reg:SI 92)
                (plus:SI (reg:SI 93)
                    (reg:SI 94)))
            (clobber (reg:CC 17 flags))
        ]) "addition.c":7 -1
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32]))
        (nil)))

(insn 16 15 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 c+0 S4 A32])
        (reg:SI 92)) "addition.c":7 -1
     (nil))

;; printf ("%d", c_3);

(insn 17 16 18 (set (reg:SI 95)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 c+0 S4 A32])) "addition.c":8 -1
     (nil))

(insn 18 17 19 (set (reg:SI 4 si)
        (reg:SI 95)) "addition.c":8 -1
     (nil))

(insn 19 18 20 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f53d6e30c60 *.LC0>)) "addition.c":8 -1
     (nil))

(insn 20 19 21 (set (reg:QI 0 ax)
        (const_int 0 [0])) "addition.c":8 -1
     (nil))

(call_insn 21 20 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f53d6d87800 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "addition.c":8 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))

;; _6 = 0;

(insn 22 21 0 (set (reg:SI 87 [ _6 ])
        (const_int 0 [0])) "addition.c":10 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; <L0>:

(code_label 23 22 24 2 (nil) [0 uses])

(note 24 23 0 NOTE_INSN_BASIC_BLOCK)

;; return _6;

(insn 25 24 26 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _6 ])) -1
     (nil))

(jump_insn 26 25 27 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 27 26 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.
Removing jump 26.
Merging block 5 into block 2...
Merged blocks 2 and 5.
Merged 2 and 5 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [1 argc+0 S4 A32])
        (reg:SI 5 di [ argc ])) "addition.c":4 -1
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [2 argv+0 S8 A64])
        (reg:DI 4 si [ argv ])) "addition.c":4 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])
        (const_int 10 [0xa])) "addition.c":5 -1
     (nil))
(insn 8 7 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])
        (const_int 20 [0x14])) "addition.c":6 -1
     (nil))
(insn 13 8 14 2 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])) "addition.c":7 -1
     (nil))
(insn 14 13 15 2 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32])) "addition.c":7 -1
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg:SI 92)
                (plus:SI (reg:SI 93)
                    (reg:SI 94)))
            (clobber (reg:CC 17 flags))
        ]) "addition.c":7 -1
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 b+0 S4 A32]))
        (nil)))
(insn 16 15 17 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 c+0 S4 A32])
        (reg:SI 92)) "addition.c":7 -1
     (nil))
(insn 17 16 18 2 (set (reg:SI 95)
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 c+0 S4 A32])) "addition.c":8 -1
     (nil))
(insn 18 17 19 2 (set (reg:SI 4 si)
        (reg:SI 95)) "addition.c":8 -1
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f53d6e30c60 *.LC0>)) "addition.c":8 -1
     (nil))
(insn 20 19 21 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "addition.c":8 -1
     (nil))
(call_insn 21 20 22 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f53d6d87800 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "addition.c":8 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 22 21 25 2 (set (reg:SI 87 [ _6 ])
        (const_int 0 [0])) "addition.c":10 -1
     (nil))
(insn 25 22 29 2 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _6 ])) -1
     (nil))
(insn 29 25 30 2 (set (reg/i:SI 0 ax)
        (reg:SI 88 [ <retval> ])) "addition.c":11 -1
     (nil))
(insn 30 29 0 2 (use (reg/i:SI 0 ax)) "addition.c":11 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)

